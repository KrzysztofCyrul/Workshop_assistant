import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:intl/intl.dart';
import '../bloc/appointment_bloc.dart';
import '../../../clients/domain/entities/client.dart';
import '../../../vehicles/domain/entities/vehicle.dart';
import '../../../clients/presentation/bloc/client_bloc.dart';
import '../../../vehicles/presentation/bloc/vehicle_bloc.dart';
import '../../../auth/presentation/bloc/auth_bloc.dart';

// Constants for appointment status
class AppointmentStatus {
  static const String pending = 'pending';
  static const String inProgress = 'in_progress';
  static const String completed = 'completed';
  static const String canceled = 'canceled';

  static String getLabel(String status) {
    switch (status) {
      case pending:
        return 'Do wykonania';
      case inProgress:
        return 'W trakcie';
      case completed:
        return 'Zakończone';
      case canceled:
        return 'Anulowane';
      default:
        return status;
    }
  }
  
  static IconData getIcon(String status) {
    switch (status) {
      case pending:
        return Icons.pending;
      case inProgress:
        return Icons.timelapse;
      case completed:
        return Icons.check_circle;
      case canceled:
        return Icons.cancel;
      default:
        return Icons.info;
    }
  }

  static Color getColor(String status) {
    switch (status) {
      case pending:
        return Colors.orange;
      case inProgress:
        return Colors.blue;
      case completed:
        return Colors.green;
      case canceled:
        return Colors.red;
      default:
        return Colors.grey;
    }
  }
}

class AddAppointmentScreen extends StatefulWidget {
  static const String routeName = '/add-appointment';
  
  final String workshopId;

  const AddAppointmentScreen({
    super.key,
    required this.workshopId,
  });

  @override
  State<AddAppointmentScreen> createState() => _AddAppointmentScreenState();
}

class _AddAppointmentScreenState extends State<AddAppointmentScreen> {
  final _formKey = GlobalKey<FormState>();
  
  // Form controllers
  final TextEditingController _notesController = TextEditingController();
  final TextEditingController _mileageController = TextEditingController();
  final TextEditingController _estimatedDurationController = TextEditingController(text: '60');
  
  // Form values
  Client? _selectedClient;
  Vehicle? _selectedVehicle;
  DateTime _selectedDate = DateTime.now();
  TimeOfDay _selectedTime = TimeOfDay.now();
  String _selectedStatus = AppointmentStatus.pending;
  List<String> _selectedMechanicIds = []; // Store mechanic IDs
  bool _isLoadingClients = true;
  bool _isLoadingVehicles = false;
  
  @override
  void initState() {
    super.initState();
    // Load initial data
    _loadData();
  }
  
  void _loadData() {
    // Load clients for this workshop
    context.read<ClientBloc>().add(LoadClientsEvent(workshopId: widget.workshopId));
    
    // Current user should be automatically selected
    final authState = context.read<AuthBloc>().state;
    if (authState is Authenticated) {
      setState(() {
        _selectedMechanicIds = [authState.user.id];
      });
    }
  }

  void _onClientSelected(Client client) {
    setState(() {
      _selectedClient = client;
      _selectedVehicle = null; // Reset vehicle selection
      _isLoadingVehicles = true;
    });
    
    // Load vehicles for selected client
    context.read<VehicleBloc>().add(
      LoadVehiclesForClientEvent(
        workshopId: widget.workshopId,
        clientId: client.id,
      ),
    );
  }
  
  Future<void> _selectDate(BuildContext context) async {
    final DateTime? pickedDate = await showDatePicker(
      context: context,
      initialDate: _selectedDate,
      firstDate: DateTime.now(),
      lastDate: DateTime.now().add(const Duration(days: 365)),
      builder: (context, child) {
        return Theme(
          data: Theme.of(context).copyWith(
            colorScheme: ColorScheme.light(
              primary: Theme.of(context).primaryColor,
              onPrimary: Colors.white,
              surface: Colors.white,
              onSurface: Colors.black,
            ),
          ),
          child: child!,
        );
      },
    );
    
    if (pickedDate != null && pickedDate != _selectedDate) {
      setState(() {
        _selectedDate = pickedDate;
      });
    }
  }

  Future<void> _selectTime(BuildContext context) async {
    final TimeOfDay? pickedTime = await showTimePicker(
      context: context,
      initialTime: _selectedTime,
      builder: (context, child) {
        return Theme(
          data: Theme.of(context).copyWith(
            colorScheme: ColorScheme.light(
              primary: Theme.of(context).primaryColor,
              onPrimary: Colors.white,
              surface: Colors.white,
              onSurface: Colors.black,
            ),
          ),
          child: child!,
        );
      },
    );
    
    if (pickedTime != null && pickedTime != _selectedTime) {
      setState(() {
        _selectedTime = pickedTime;
      });
    }
  }
  
  void _submitForm() {
    if (_formKey.currentState!.validate() && _validateRequiredFields()) {
      // Create DateTime from date and time
      final DateTime scheduledTime = DateTime(
        _selectedDate.year,
        _selectedDate.month,
        _selectedDate.day,
        _selectedTime.hour,
        _selectedTime.minute,
      );
      
      // Parse values
      final int mileage = _mileageController.text.isNotEmpty 
          ? int.tryParse(_mileageController.text) ?? 0 
          : 0;
      
      final int estimatedDuration = int.tryParse(_estimatedDurationController.text) ?? 60;
      
      // Add appointment
      context.read<AppointmentBloc>().add(
        AddAppointmentEvent(
          workshopId: widget.workshopId,
          clientId: _selectedClient!.id,
          vehicleId: _selectedVehicle!.id,
          scheduledTime: scheduledTime,
          notes: _notesController.text,
          mileage: mileage,
          recommendations: '',
          estimatedDuration: Duration(minutes: estimatedDuration),
          totalCost: 0.0, // Initial cost is 0
          status: _selectedStatus,
          assignedMechanicIds: _selectedMechanicIds,
        ),
      );
    }
  }
  
  bool _validateRequiredFields() {
    if (_selectedClient == null) {
      _showValidationError('Proszę wybrać klienta');
      return false;
    }
    
    if (_selectedVehicle == null) {
      _showValidationError('Proszę wybrać pojazd');
      return false;
    }
    
    if (_selectedMechanicIds.isEmpty) {
      _showValidationError('Proszę wybrać przynajmniej jednego mechanika');
      return false;
    }
    
    return true;
  }
  
  void _showValidationError(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Colors.red,
      ),
    );
  }
  
  void _navigateToAddClientScreen() {
    // Navigate to add client screen
    Navigator.pushNamed(
      context,
      '/add-client',
      arguments: {'workshopId': widget.workshopId},
    ).then((_) {
      // Reload clients after returning
      context.read<ClientBloc>().add(LoadClientsEvent(workshopId: widget.workshopId));
    });
  }
  
  void _navigateToAddVehicleScreen() {
    if (_selectedClient == null) {
      _showValidationError('Proszę najpierw wybrać klienta');
      return;
    }
    
    // Navigate to add vehicle screen
    Navigator.pushNamed(
      context,
      '/add-vehicle',
      arguments: {
        'workshopId': widget.workshopId,
        'clientId': _selectedClient!.id,
      },
    ).then((_) {
      // Reload vehicles after returning
      if (_selectedClient != null) {
        context.read<VehicleBloc>().add(
          LoadVehiclesForClientEvent(
            workshopId: widget.workshopId,
            clientId: _selectedClient!.id,
          ),
        );
      }
    });
  }

  @override
  void dispose() {
    _notesController.dispose();
    _mileageController.dispose();
    _estimatedDurationController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Dodaj nową wizytę'),
        actions: [
          IconButton(
            icon: const Icon(Icons.check),
            onPressed: _submitForm,
            tooltip: 'Zapisz wizytę',
          ),
        ],
      ),
      body: MultiBlocListener(
        listeners: [
          BlocListener<AppointmentBloc, AppointmentState>(
            listener: (context, state) {
              if (state is AppointmentOperationSuccess) {
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content: Text(state.message),
                    backgroundColor: Colors.green,
                  ),
                );
                Navigator.pop(context);
              } else if (state is AppointmentError) {
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content: Text(state.message),
                    backgroundColor: Colors.red,
                  ),
                );
              }
            },
          ),
          BlocListener<ClientBloc, ClientState>(
            listener: (context, state) {
              if (state is ClientsLoaded) {
                setState(() {
                  _isLoadingClients = false;
                });
              }
            },
          ),
          BlocListener<VehicleBloc, VehicleState>(
            listener: (context, state) {
              if (state is VehiclesLoaded) {
                setState(() {
                  _isLoadingVehicles = false;
                });
              }
            },
          ),
        ],
        child: Form(
          key: _formKey,
          child: SingleChildScrollView(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                _buildSectionTitle('Klient i pojazd'),
                _buildClientSelector(),
                const SizedBox(height: 16),
                _buildVehicleSelector(),
                const SizedBox(height: 24),
                
                _buildSectionTitle('Termin wizyty'),
                _buildDateTimePicker(),
                const SizedBox(height: 24),
                
                _buildSectionTitle('Szczegóły wizyty'),
                _buildAppointmentDetails(),
                const SizedBox(height: 24),
                
                _buildSectionTitle('Status wizyty'),
                _buildStatusSelector(),
                const SizedBox(height: 24),

                // Section for current mechanic
                _buildSectionTitle('Mechanik'),
                _buildCurrentMechanicInfo(),
                const SizedBox(height: 24),
                
                _buildSectionTitle('Notatki'),
                _buildNotesField(),
                const SizedBox(height: 40),
                
                _buildSubmitButton(),
              ],
            ),
          ),
        ),
      ),
    );
  }
  
  Widget _buildSectionTitle(String title) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 8.0),
      child: Text(
        title,
        style: const TextStyle(
          fontSize: 18,
          fontWeight: FontWeight.bold,
        ),
      ),
    );
  }
  
  Widget _buildClientSelector() {
    return BlocBuilder<ClientBloc, ClientState>(
      builder: (context, state) {
        if (state is ClientsLoaded) {
          final clients = state.clients;
          
          if (clients.isEmpty) {
            return Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Padding(
                  padding: EdgeInsets.all(8.0),
                  child: Text(
                    'Nie znaleziono żadnych klientów',
                    style: TextStyle(fontStyle: FontStyle.italic),
                  ),
                ),
                const SizedBox(height: 8),
                ElevatedButton.icon(
                  onPressed: _navigateToAddClientScreen,
                  icon: const Icon(Icons.add),
                  label: const Text('Dodaj nowego klienta'),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.green,
                    foregroundColor: Colors.white,
                  ),
                ),
              ],
            );
          }
          
          return Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Card(
                elevation: 2,
                margin: EdgeInsets.zero,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(12),
                  side: BorderSide(color: Colors.grey.shade300),
                ),
                child: Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 12.0),
                  child: DropdownButtonHideUnderline(
                    child: DropdownButton<Client>(
                      value: _selectedClient,
                      hint: const Text('Wybierz klienta'),
                      isExpanded: true,
                      icon: const Icon(Icons.arrow_drop_down),
                      items: clients.map((client) {
                        return DropdownMenuItem<Client>(
                          value: client,
                          child: Padding(
                            padding: const EdgeInsets.symmetric(vertical: 8.0),
                            child: Row(
                              children: [
                                CircleAvatar(
                                  backgroundColor: Theme.of(context).primaryColor,
                                  child: Text(
                                    _getInitials(client.firstName, client.lastName),
                                    style: const TextStyle(color: Colors.white),
                                  ),
                                ),
                                const SizedBox(width: 12),
                                Expanded(
                                  child: Column(
                                    crossAxisAlignment: CrossAxisAlignment.start,
                                    children: [
                                      Text(
                                        '${client.firstName} ${client.lastName}',
                                        style: const TextStyle(fontWeight: FontWeight.bold),
                                      ),
                                      if (client.phone != null && client.phone!.isNotEmpty)
                                        Text(
                                          client.phone!,
                                          style: const TextStyle(fontSize: 12),
                                        ),
                                    ],
                                  ),
                                )
                              ],
                            ),
                          ),
                        );
                      }).toList(),
                      onChanged: (Client? newValue) {
                        if (newValue != null) {
                          _onClientSelected(newValue);
                        }
                      },
                    ),
                  ),
                ),
              ),
              const SizedBox(height: 8),
              ElevatedButton.icon(
                onPressed: _navigateToAddClientScreen,
                icon: const Icon(Icons.add),
                label: const Text('Dodaj nowego klienta'),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.green,
                  foregroundColor: Colors.white,
                ),
              ),
            ],
          );
        } else if (state is ClientLoading || _isLoadingClients) {
          return const Center(
            child: Padding(
              padding: EdgeInsets.all(16.0),
              child: CircularProgressIndicator(),
            ),
          );
        } else if (state is ClientError) {
          return Center(
            child: Text(
              'Błąd: ${state.message}',
              style: const TextStyle(color: Colors.red),
            ),
          );
        } else {
          return const Center(
            child: Text('Nie udało się załadować klientów'),
          );
        }
      },
    );
  }
  
  Widget _buildVehicleSelector() {
    if (_selectedClient == null) {
      return const Card(
        elevation: 1,
        child: Padding(
          padding: EdgeInsets.all(16.0),
          child: Row(
            children: [
              Icon(Icons.info_outline, color: Colors.orange),
              SizedBox(width: 8),
              Text(
                'Najpierw wybierz klienta, aby zobaczyć jego pojazdy',
                style: TextStyle(fontStyle: FontStyle.italic),
              ),
            ],
          ),
        ),
      );
    }
    
    return BlocBuilder<VehicleBloc, VehicleState>(
      builder: (context, state) {
        if (state is VehiclesLoaded) {
          final vehicles = state.vehicles;
          
          if (vehicles.isEmpty) {
            return Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Card(
                  elevation: 1,
                  child: Padding(
                    padding: EdgeInsets.all(16.0),
                    child: Row(
                      children: [
                        Icon(Icons.directions_car_outlined, color: Colors.orange),
                        SizedBox(width: 8),
                        Text(
                          'Klient nie posiada żadnych pojazdów',
                          style: TextStyle(fontStyle: FontStyle.italic),
                        ),
                      ],
                    ),
                  ),
                ),
                const SizedBox(height: 8),
                ElevatedButton.icon(
                  onPressed: _navigateToAddVehicleScreen,
                  icon: const Icon(Icons.add),
                  label: const Text('Dodaj nowy pojazd'),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.green,
                    foregroundColor: Colors.white,
                  ),
                ),
              ],
            );
          }
          
          return Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Card(
                elevation: 2,
                margin: EdgeInsets.zero,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(12),
                  side: BorderSide(color: Colors.grey.shade300),
                ),
                child: Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 12.0),
                  child: DropdownButtonHideUnderline(
                    child: DropdownButton<Vehicle>(
                      value: _selectedVehicle,
                      hint: const Text('Wybierz pojazd'),
                      isExpanded: true,
                      icon: const Icon(Icons.arrow_drop_down),
                      items: vehicles.map((vehicle) {
                        return DropdownMenuItem<Vehicle>(
                          value: vehicle,
                          child: Padding(
                            padding: const EdgeInsets.symmetric(vertical: 8.0),
                            child: Row(
                              children: [
                                Icon(
                                  Icons.directions_car,
                                  color: Theme.of(context).primaryColor,
                                  size: 28,
                                ),
                                const SizedBox(width: 12),
                                Expanded(
                                  child: Column(
                                    crossAxisAlignment: CrossAxisAlignment.start,
                                    children: [
                                      Text(
                                        '${vehicle.make} ${vehicle.model}',
                                        style: const TextStyle(fontWeight: FontWeight.bold),
                                      ),
                                      Text(
                                        vehicle.licensePlate,
                                        style: const TextStyle(fontSize: 12),
                                      ),
                                    ],
                                  ),
                                ),
                              ],
                            ),
                          ),
                        );
                      }).toList(),
                      onChanged: (Vehicle? newValue) {
                        setState(() {
                          _selectedVehicle = newValue;
                          if (newValue != null && newValue.mileage > 0) {
                            _mileageController.text = newValue.mileage.toString();
                          }
                        });
                      },
                    ),
                  ),
                ),
              ),
              const SizedBox(height: 8),
              ElevatedButton.icon(
                onPressed: _navigateToAddVehicleScreen,
                icon: const Icon(Icons.add),
                label: const Text('Dodaj nowy pojazd'),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.green,
                  foregroundColor: Colors.white,
                ),
              ),
            ],
          );
        } else if (state is VehicleLoading || _isLoadingVehicles) {
          return const Center(
            child: Padding(
              padding: EdgeInsets.all(16.0),
              child: CircularProgressIndicator(),
            ),
          );
        } else if (state is VehicleError) {
          return Center(
            child: Text(
              'Błąd: ${state.message}',
              style: const TextStyle(color: Colors.red),
            ),
          );
        } else {
          return const Center(
            child: Text('Nie udało się załadować pojazdów'),
          );
        }
      },
    );
  }
  
  Widget _buildDateTimePicker() {
    final dateFormat = DateFormat('dd.MM.yyyy');
    final formattedDate = dateFormat.format(_selectedDate);
    
    return Column(
      children: [
        // Date picker
        Card(
          elevation: 2,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
            side: BorderSide(color: Colors.grey.shade300),
          ),
          child: ListTile(
            leading: const Icon(Icons.calendar_today),
            title: const Text('Data wizyty'),
            subtitle: Text(formattedDate),
            trailing: const Icon(Icons.arrow_drop_down),
            onTap: () => _selectDate(context),
          ),
        ),
        const SizedBox(height: 12),
        // Time picker
        Card(
          elevation: 2,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
            side: BorderSide(color: Colors.grey.shade300),
          ),
          child: ListTile(
            leading: const Icon(Icons.access_time),
            title: const Text('Godzina wizyty'),
            subtitle: Text('${_selectedTime.format(context)}'),
            trailing: const Icon(Icons.arrow_drop_down),
            onTap: () => _selectTime(context),
          ),
        ),
      ],
    );
  }
  
  Widget _buildAppointmentDetails() {
    return Column(
      children: [
        Card(
          elevation: 2,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
            side: BorderSide(color: Colors.grey.shade300),
          ),
          child: Padding(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                // Mileage input
                TextFormField(
                  controller: _mileageController,
                  decoration: const InputDecoration(
                    labelText: 'Przebieg (km)',
                    prefixIcon: Icon(Icons.speed),
                    border: OutlineInputBorder(),
                  ),
                  keyboardType: TextInputType.number,
                ),
                const SizedBox(height: 16),
                // Estimated duration input
                TextFormField(
                  controller: _estimatedDurationController,
                  decoration: const InputDecoration(
                    labelText: 'Szacowany czas trwania (minuty)',
                    prefixIcon: Icon(Icons.timer),
                    border: OutlineInputBorder(),
                  ),
                  keyboardType: TextInputType.number,
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'Proszę wprowadzić szacowany czas';
                    }
                    if (int.tryParse(value) == null || int.parse(value) <= 0) {
                      return 'Proszę wprowadzić poprawną wartość';
                    }
                    return null;
                  },
                ),
              ],
            ),
          ),
        ),
      ],
    );
  }
  
  Widget _buildStatusSelector() {
    final statusOptions = [
      AppointmentStatus.pending,
      AppointmentStatus.inProgress,
      AppointmentStatus.completed,
      AppointmentStatus.canceled,
    ];
    
    return Card(
      elevation: 2,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(12),
        side: BorderSide(color: Colors.grey.shade300),
      ),
      child: Padding(
        padding: const EdgeInsets.symmetric(vertical: 8.0),
        child: Column(
          children: statusOptions.map((status) {
            final bool isSelected = status == _selectedStatus;
            final statusColor = AppointmentStatus.getColor(status);
            final statusIcon = AppointmentStatus.getIcon(status);
            final statusLabel = AppointmentStatus.getLabel(status);
            
            return InkWell(
              onTap: () {
                setState(() {
                  _selectedStatus = status;
                });
              },
              child: Padding(
                padding: const EdgeInsets.symmetric(vertical: 8.0, horizontal: 16.0),
                child: Row(
                  children: [
                    Icon(statusIcon, color: statusColor),
                    const SizedBox(width: 16),
                    Text(
                      statusLabel,
                      style: TextStyle(
                        fontWeight: isSelected ? FontWeight.bold : FontWeight.normal,
                      ),
                    ),
                    const Spacer(),
                    if (isSelected) 
                      Icon(Icons.check_circle, color: Theme.of(context).primaryColor),
                  ],
                ),
              ),
            );
          }).toList(),
        ),
      ),
    );
  }
  
  Widget _buildCurrentMechanicInfo() {
    return BlocBuilder<AuthBloc, AuthState>(
      builder: (context, state) {
        if (state is Authenticated) {
          final user = state.user;
          final isCurrentMechanicSelected = _selectedMechanicIds.contains(user.id);
          
          return Card(
            elevation: 2,
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(12),
              side: BorderSide(
                color: isCurrentMechanicSelected ? Theme.of(context).primaryColor : Colors.grey.shade300,
                width: isCurrentMechanicSelected ? 2.0 : 1.0,
              ),
            ),
            child: InkWell(
              onTap: () {
                setState(() {
                  if (isCurrentMechanicSelected) {
                    _selectedMechanicIds.remove(user.id);
                  } else {
                    _selectedMechanicIds.add(user.id);
                  }
                });
              },
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: Row(
                  children: [
                    CircleAvatar(
                      backgroundColor: Theme.of(context).primaryColor,
                      child: Text(
                        _getInitials(user.firstName, user.lastName),
                        style: const TextStyle(color: Colors.white),
                      ),
                    ),
                    const SizedBox(width: 16),
                    Expanded(
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            user.fullName,
                            style: const TextStyle(fontWeight: FontWeight.bold),
                          ),
                          Text(
                            user.email,
                            style: const TextStyle(fontSize: 12),
                          ),
                        ],
                      ),
                    ),
                    Checkbox(
                      value: isCurrentMechanicSelected,
                      onChanged: (value) {
                        setState(() {
                          if (value == true) {
                            if (!_selectedMechanicIds.contains(user.id)) {
                              _selectedMechanicIds.add(user.id);
                            }
                          } else {
                            _selectedMechanicIds.remove(user.id);
                          }
                        });
                      },
                      activeColor: Theme.of(context).primaryColor,
                    ),
                  ],
                ),
              ),
            ),
          );
        } else {
          return const Card(
            elevation: 1,
            child: Padding(
              padding: EdgeInsets.all(16.0),
              child: Row(
                children: [
                  Icon(Icons.info_outline, color: Colors.orange),
                  SizedBox(width: 8),
                  Text(
                    'Nie można pobrać informacji o bieżącym mechaniku',
                    style: TextStyle(fontStyle: FontStyle.italic),
                  ),
                ],
              ),
            ),
          );
        }
      },
    );
  }
  
  Widget _buildNotesField() {
    return Card(
      elevation: 2,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(12),
        side: BorderSide(color: Colors.grey.shade300),
      ),
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: TextFormField(
          controller: _notesController,
          decoration: const InputDecoration(
            labelText: 'Notatki',
            hintText: 'Dodaj informacje o wizycie...',
            border: OutlineInputBorder(),
            alignLabelWithHint: true,
          ),
          maxLines: 5,
        ),
      ),
    );
  }
  
  Widget _buildSubmitButton() {
    return BlocBuilder<AppointmentBloc, AppointmentState>(
      builder: (context, state) {
        final isLoading = state is AppointmentLoading;
        
        return SizedBox(
          width: double.infinity,
          child: ElevatedButton(
            onPressed: isLoading ? null : _submitForm,
            style: ElevatedButton.styleFrom(
              backgroundColor: Theme.of(context).primaryColor,
              foregroundColor: Colors.white,
              padding: const EdgeInsets.all(16),
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(12),
              ),
            ),
            child: isLoading 
              ? const CircularProgressIndicator(color: Colors.white)
              : const Text(
                  'Zapisz wizytę',
                  style: TextStyle(fontSize: 18),
                ),
          ),
        );
      },
    );
  }
  
  String _getInitials(String firstName, String lastName) {
    if (firstName.isNotEmpty && lastName.isNotEmpty) {
      return '${firstName[0]}${lastName[0]}'.toUpperCase();
    } else if (firstName.isNotEmpty) {
      return firstName[0].toUpperCase();
    } else if (lastName.isNotEmpty) {
      return lastName[0].toUpperCase();
    }
    return '?';
  }
}
